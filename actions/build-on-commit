#!/usr/bin/env python3

import sys

sys.path.append('lib')
from charms.layer.basic import activate_venv  # noqa: E402
activate_venv()

from charmhelpers.core import hookenv  # noqa: E402
from charms.reactive import RelationBase  # noqa: E402
import cwrhelpers  # noqa: E402
from jenkins import Jenkins, JenkinsException  # noqa: E402
from os import getcwd
from utils import (
    get_hook_token,
    get_rest_path,
    REST_PORT,
    TRIGGER_PERIODICALLY,
    SKIP_BUILDS
)  # noqa: E402


def add_job():
    '''
    Adds a job to be triggered upon a commit on github

    '''
    jenkins_relation = (RelationBase.from_state('jenkins.available'))
    jenkins_connection_info = jenkins_relation.get_connection_info()
    jclient = Jenkins(jenkins_connection_info["jenkins_url"],
                      jenkins_connection_info["admin_username"],
                      jenkins_connection_info["admin_password"])

    charm_name, charm_fname = cwrhelpers.get_charm_names()
    try:
        bundle_name, bundle_fname, bundle_app_name = cwrhelpers\
                .get_reference_bundle()
    except cwrhelpers.InvalidBundle as e:
        cwrhelpers.fail_action(str(e), e.reason)
    if not bundle_name:
        cwrhelpers.fail_action('Charm does not provide reference bundle '
                               'and none was provided to action')

    repo_access = hookenv.action_get("repo-access")
    if repo_access not in ['webhooks', 'poll']:
        cwrhelpers.fail_action('The repo-access can only be \'webhooks\' or \'poll\'')

    trigger, skip_builds = "", "" if repo_access == 'webhooks' else TRIGGER_PERIODICALLY, SKIP_BUILDS

    rep = {"{{gitrepo}}": hookenv.action_get("repo"),
           "{{charm_subdir}}": hookenv.action_get("charm-subdir"),
           "{{pushtochannel}}": hookenv.action_get("push-to-channel") or "",
           "{{lpid}}": hookenv.action_get("lp-id") or "",
           "{{branch}}": hookenv.action_get("branch"),
           "{{charmname}}": charm_name,
           "{{charm_fname}}": charm_fname,
           "{{bundle_name}}": bundle_name,
           "{{bundle_fname}}": bundle_fname,
           "{{bundle_app_name}}": bundle_app_name,
           "{{refspec}}": "",
           "{{series}}": hookenv.action_get("series") or "",
           "{{controller}}": hookenv.action_get("controller") or "",
           "{{charm_home}}": getcwd(),
           "{{trigger}}": trigger,
           "{{skip_builds}}": skip_builds,
           }

    template_path_source = "templates/BuildMyCharm/config.xml"
    job_name = "charm-{}".format(charm_fname)
    with open(template_path_source) as infile:
        data = infile.read()
        for src, target in rep.items():
            data = data.replace(src, target)
        try:
            jclient.create_job(job_name, data)
        except JenkinsException as e:
            cwrhelpers.fail_action(str(e))
    token = get_hook_token(job_name)
    url = "http://<Jenkins_machine>:{}{}/trigger/{}/{}".format(REST_PORT,
                                                         get_rest_path(),
                                                         job_name,
                                                         token)

    # Need to trigger the job fir the first time in case of poll
    # or return the webhook
    if repo_access == 'poll':
        jclient.build_job(job_name)
    else:
        hookenv.action_set({'hook.url': url})


if __name__ == "__main__":
    add_job()
