#!/usr/bin/env python3

import sys

sys.path.append('lib')
from charms.layer.basic import activate_venv  # noqa: E402
activate_venv()

from charmhelpers.core import hookenv  # noqa: E402
from charms.reactive import RelationBase  # noqa: E402
from cwrhelpers import app_from_bundle, fail_action  # noqa: E402
from jenkins import Jenkins  # noqa: E402


def add_job():
    '''
    Adds a job to be triggered upon a commit on github

    '''
    jenkins_relation = (RelationBase.from_state('jenkins.available'))
    jenkins_connection_info = jenkins_relation.get_connection_info()
    jclient = Jenkins(jenkins_connection_info["jenkins_url"],
                      jenkins_connection_info["admin_username"],
                      jenkins_connection_info["admin_password"])

    repo = hookenv.action_get("repo")
    bundle_name = hookenv.action_get("bundle-name")
    controller = hookenv.action_get("controller")

    post_build = "<hudson.tasks.BuildTrigger><childProjects>build-bundle-{}</childProjects>\
      <threshold>\
        <name>SUCCESS</name>\
        <ordinal>0</ordinal>\
        <color>BLUE</color>\
        <completeBuild>true</completeBuild>\
      </threshold></hudson.tasks.BuildTrigger>".format(bundle_name)

    rep = {"{{repo}}": repo,
           "{{postbuild}}": post_build}

    template_path_source = "templates/BuildMyBundle/config.xml"
    with open(template_path_source) as infile:
        data = infile.read()
        for src, target in rep.items():
            data = data.replace(src, target)
        jclient.create_job("check-bundle-{}".format(bundle_name), data)


    post_build = "<org.jenkinsci.plugins.postbuildscript.PostBuildScript plugin=\"postbuildscript@0.17\">\
      <buildSteps>\
        <hudson.tasks.Shell>\
          <command>juju destroy-model test-{}-$BUILD_NUMBER -y</command>\
        </hudson.tasks.Shell>\
      </buildSteps>\
      <scriptOnlyIfSuccess>false</scriptOnlyIfSuccess>\
      <scriptOnlyIfFailure>false</scriptOnlyIfFailure>\
      <markBuildUnstable>false</markBuildUnstable>\
    </org.jenkinsci.plugins.postbuildscript.PostBuildScript>".format(bundle_name)

    rep = {"{{repo}}": repo,
           "{{postbuild}}": post_build,
           "{{controller}}": controller,
           "{{bundlename}}": bundle_name}

    template_path_source = "templates/BuildMyBundle/config.xml"
    with open(template_path_source) as infile:
        data = infile.read()
        for src, target in rep.items():
            data = data.replace(src, target)
        jclient.create_job("build-bundle-{}".format(bundle_name), data)

if __name__ == "__main__":
    add_job()
