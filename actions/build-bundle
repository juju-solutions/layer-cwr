#!/usr/bin/env python3
from os import getcwd
import sys

sys.path.append('lib')
from charms.layer.basic import activate_venv  # noqa: E402
activate_venv()

from charmhelpers.core import hookenv  # noqa: E402
from charms.reactive import RelationBase  # noqa: E402
from charmhelpers.core import templating  # noqa: E402
import cwrhelpers  # noqa: E402
from jenkins import Jenkins, JenkinsException  # noqa: E402
from utils import (
    REST_PORT,
    get_badge_path,
    get_rest_path,
    get_hook_token,
    get_fname,
)  # noqa: E402


def add_job():
    '''
    Adds a job to be triggered upon a commit on github

    '''
    jenkins_relation = (RelationBase.from_state('jenkins.available'))
    jenkins_connection_info = jenkins_relation.get_connection_info()
    jclient = Jenkins(jenkins_connection_info["jenkins_url"],
                      jenkins_connection_info["admin_username"],
                      jenkins_connection_info["admin_password"])

    repo = hookenv.action_get("repo")
    bundle_name = hookenv.action_get("bundle-name")
    bundle_fname = get_fname(bundle_name)
    branch = hookenv.action_get("branch")
    controller = hookenv.action_get("controller")
    charm_home = getcwd()

    # This job will "build" the bundle aka update, test, push to store
    job_name = 'build_bundle_{}'.format(bundle_fname)
    job_contents = templating.render(
        source="BuildMyBundle/config-build.xml",
        target=None,
        context={
            "repo": repo,
            "bundle_name": bundle_name,
            "bundle_fname": bundle_fname,
            "controller": controller or "",
            "branch": branch,
            "cwr_charm_home": charm_home,
        })
    try:
        jclient.create_job(job_name, job_contents)
    except JenkinsException as e:
        cwrhelpers.fail_action(str(e))

    token = get_hook_token(job_name)
    url = "http://<Jenkins_machine>:{}{}/trigger/{}/{}".format(
        REST_PORT, get_rest_path(), job_name, token)

    badge_url = "http://<Jenkins_machine>:{}{}".format(
        REST_PORT, get_badge_path(job_name))

    hookenv.action_set({'hook.url': url})
    hookenv.action_set({'build.badge': badge_url})

if __name__ == "__main__":
    add_job()
