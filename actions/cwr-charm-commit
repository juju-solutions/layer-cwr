#!/usr/bin/env python3

import sys
sys.path.append('lib')

from charms.layer.basic import activate_venv  # noqa: E402
activate_venv()

from charmhelpers.core import hookenv  # noqa: E402
import cwrhelpers  # noqa: E402
from utils import (
    trigger_jenkins_job,
    TRIGGER_PERIODICALLY,
)  # noqa: E402


def add_job():
    """ Adds a job to be triggered upon a commit on github."""
    jclient = cwrhelpers.make_jenkins_client()
    charm_name, charm_fname = cwrhelpers.get_charm_names()
    bundle_name, bundle_fname, bundle_app_name = (cwrhelpers.
                                                  get_reference_bundle())
    repo_access = hookenv.action_get("repo-access")
    if repo_access == 'webhooks':
        trigger = ""
        skip_builds = ""
    elif repo_access == 'poll':
        trigger = TRIGGER_PERIODICALLY
        skip_builds = 'skip_builds'
    else:
        cwrhelpers.fail_action(
            "The repo-access can only be 'webhooks' or 'poll'")

    job_name = "cwr_charm_commit_{}_in_{}".format(charm_fname, bundle_fname)
    context = cwrhelpers.get_common_context(
        job_name, charm_name, bundle_name, bundle_app_name)
    context['branch'] = hookenv.action_get("branch")
    context['refspec'] = ""
    context['trigger'] = trigger
    context['skip_builds'] = skip_builds
    token = cwrhelpers.create_jenkins_job(
        jenkins_client=jclient, source="BuildMyCharm/config.xml", target=None,
        context=context, job_name=job_name)

    url, badge_url = cwrhelpers.get_info_urls('trigger', token, job_name)
    # Need to trigger the job for the first time in case of poll
    # or return the webhook
    if repo_access == 'poll':
        trigger_jenkins_job(jclient, job_name)
    else:
        hookenv.action_set({'hook.url': url})

    hookenv.action_set({'build.badge': badge_url})


if __name__ == "__main__":
    add_job()
