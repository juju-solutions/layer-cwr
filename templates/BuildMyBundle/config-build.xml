<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
   <triggers>
    <org.jenkinsci.plugins.scripttrigger.ScriptTrigger plugin="scripttrigger@0.34">
      <spec>*/10 * * * *</spec>
      <labelRestriction>false</labelRestriction>
      <enableConcurrentBuild>false</enableConcurrentBuild>
      <script>#!/bin/bash
python3 -u {{cwr_charm_home}}/scripts/bundlebuilder.py check {{repo}} {{branch}}
</script>
      <exitCode>0</exitCode>
    </org.jenkinsci.plugins.scripttrigger.ScriptTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
# Keep track of the controllers and models we want CWR to run
CONTROLLERS=""
MODELS_TO_TEST=""

# If not specified, CWR will run on all registered controllers
if [ -z "{{controller}}" ]
then
    CONTROLLERS=`cat /var/lib/jenkins/controller.names`
else
    CONTROLLERS={{controller}}
fi

# Create an empty unit tests results file in case the bundle does not produce any
touch results.xml

for controller in $CONTROLLERS
do
    juju switch ${controller}

    # we have to figure out which credential to use because of:
    # https://bugs.launchpad.net/juju/+bug/1652171
    cloud=$(juju add-model wont-be-added --credential invalid-credential 2>&amp;1 | sed -e 's/.*cloud "\?\([^ "]*\)"\?.*/\1/')
    credential_arg=""
    if [[ $cloud != localhost* &amp;&amp; $cloud != lxd ]]; then
        if ! juju credentials --format=json | grep -q $cloud; then
            echo 'This cloud requires a credential which was not found.'
            echo 'Please use set-credentials to add the credential.'
            exit 1
        fi
        credential=$(juju credentials --format=json | jq -r '.credentials.'${cloud}'."cloud-credentials" | keys[0]')
        credential_arg="--credential=$credential"
    fi
    juju add-model test-{{bundle_name}}-$BUILD_NUMBER $credential_arg

    # Keep track of all the models we want CWR to test
    MODELS_TO_TEST+="${controller}:test-{{bundle_name}}-$BUILD_NUMBER "

    # We want models for all controllers destroyed when this shell exits
    eval "function cleanup_${controller}_model() { juju destroy-model ${controller}:test-{{bundle_name}}-$BUILD_NUMBER -y; }"
    old_trap=`trap -p EXIT | awk -F"'" '{print $2}'`
    new_trap="cleanup_${controller}_model;${old_trap}"
    trap "${new_trap}" EXIT
done

# Link cwr artifacts for visibility in the jenkins job
ARTIFACTS_DIR=/srv/artifacts/{{bundle_name}}/$BUILD_NUMBER
mkdir -p $ARTIFACTS_DIR
ln -s $ARTIFACTS_DIR /var/lib/jenkins/jobs/$JOB_NAME/builds/$BUILD_NUMBER/archive
export MATRIX_OUTPUT_DIR=$ARTIFACTS_DIR
python3 -u {{cwr_charm_home}}/scripts/bundlebuilder.py build {{repo}} {{branch}} $BUILD_NUMBER $MODELS_TO_TEST
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.junit.JUnitResultArchiver plugin="junit@1.19">
      <testResults>*.xml</testResults>
      <keepLongStdio>false</keepLongStdio>
      <healthScaleFactor>1.0</healthScaleFactor>
      <allowEmptyResults>false</allowEmptyResults>
    </hudson.tasks.junit.JUnitResultArchiver>
  </publishers>

  <buildWrappers/>
</project>