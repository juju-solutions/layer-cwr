<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.24.0">
      <projectUrl>{{gitrepo}}</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.0.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        {{refspec}}
        <url>{{gitrepo}}</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>{{branch}}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.SCMTrigger>
      <spec>*/5 * * * *</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
set -ex
if [ ! -f "first-run.lock" ]; then
  touch "first-run.lock"
  echo "First run automaticaly triggered. Skipped."
  exit 0
fi

export JUJU_REPOSITORY=&quot;/tmp/&quot;
OUTPUT_DIR="builds"
SERIES_FLAG=""
if [ ! -z "{{series}}" ]
then
    OUTPUT_DIR="{{series}}"
    SERIES_FLAG="--series {{series}}"
fi

charm build $SERIES_FLAG

juju switch {{controller}}

# we have to figure out which credential to use because of:
# https://bugs.launchpad.net/juju/+bug/1652171
cloud=$(juju add-model wont-be-added --credential invalid-credential 2>&amp;1 | sed -e 's/.*cloud "\?\([^ "]*\)"\?.*/\1/')
credential_arg=""
if [[ "$cloud" != "localhost" &amp;&amp; "$cloud" != "lxd" ]]; then
    if ! juju credentials --format=json | grep -q $cloud; then
        echo 'This cloud requires a credential which was not found.'
        echo 'Please use set-credentials to add the credential.'
        exit 1
    fi
    credential=$(juju credentials --format=json | jq -r '.credentials.'${cloud}'."cloud-credentials" | keys[0]')
    credential_arg="--credential=$credential"
 fi
juju add-model test-{{charmname}}-$BUILD_NUMBER $credential_arg
function cleanup_model() {
    juju destroy-model test-{{charmname}}-$BUILD_NUMBER -y
}
trap cleanup_model EXIT

function update_bundle() {
    cat &lt;&lt;EOP
import yaml
with open('/tmp/bundles/{{bundle_fname}}/bundle.yaml', 'r') as fp:
    bundle = yaml.safe_load(fp)
app = bundle.get('applications', bundle.get('services', {}))['{{bundle_app_name}}']
app['charm'] = '/tmp/$OUTPUT_DIR/{{charmname}}'
with open('/tmp/bundles/{{bundle_fname}}/bundle.yaml', 'w') as fp:
    yaml.dump(bundle, fp)
EOP
}
[ -e /tmp/bundles ] || mkdir /tmp/bundles
rm -rf /tmp/bundles/{{bundle_fname}}
charm pull "{{bundle_name}}" /tmp/bundles/{{bundle_fname}}
python3 -c "$(update_bundle)"
rm -f totest.yaml
echo "bundle: /tmp/bundles/{{bundle_fname}}" &gt;&gt; totest.yaml
echo "bundle_name: {{charmname}}_in_{{bundle_fname}}" &gt;&gt; totest.yaml
echo "bundle_file: bundle.yaml" >> totest.yaml
ln -s /srv/artifacts/{{charmname}}_in_{{bundle_fname}}/$BUILD_NUMBER /var/lib/jenkins/jobs/$JOB_NAME/builds/$BUILD_NUMBER/archive
cwr -F {{controller}}:test-{{charmname}}-$BUILD_NUMBER totest.yaml --results-dir /srv/artifacts --test-id $BUILD_NUMBER

if [ ! -z "{{pushtochannel}}" ]
then
     CHARM_LOCATION=`charm push /tmp/$OUTPUT_DIR/{{charmname}} cs:~{{lpid}}/{{charmname}} | head -1 | awk '{print $2}'`
     charm release $CHARM_LOCATION --channel={{pushtochannel}}
     charm grant $CHARM_LOCATION everyone --channel={{pushtochannel}}
fi
      </command>
    </hudson.tasks.Shell>
  </builders>
  <buildWrappers/>
</project>
